"""
Plot service for managing evaluation plots generated by PyCaret.
"""

import logging
from pathlib import Path
from typing import List, Dict, Any, Optional

from db.mongodb import mongodb
from db.models import ModelJob
from utils.file_utils import FileManager
from utils.naming import NamingUtils
from config import settings

logger = logging.getLogger(__name__)


class PlotService:
    """Service for managing model evaluation plots."""
    
    def __init__(self):
        self.db = mongodb
        self.plots_dir = settings.plots_dir

    async def get_plot_path(self, filename: str) -> Optional[Path]:
        """Get full path to plot file."""
        try:
            plot_path = self.plots_dir / filename
            
            if plot_path.exists():
                return plot_path
            
            return None
            
        except Exception as e:
            logger.error(f"Error getting plot path for {filename}: {e}")
            return None
    
    async def list_user_plots(self, user_id: str, limit: int = 50) -> List[Dict[str, Any]]:
        """List all plots for a specific user."""
        try:
            # Find model jobs for this user to get associated plots
            model_jobs = await self.db.find(
                "model_jobs",
                {"user_id": user_id},
                limit=limit,
                sort=[("created_at", -1)]
            )
            
            plots = []
            
            for job in model_jobs:
                model_job = ModelJob(**job)
                
                # Get plots for this model
                for plot_filename in model_job.plot_filenames:
                    plot_path = self.plots_dir / plot_filename
                    
                    if plot_path.exists():
                        # Parse filename to extract plot type
                        plot_info = NamingUtils.parse_plot_filename(plot_filename)
                        
                        plots.append({
                            "filename": plot_filename,
                            "plot_type": plot_info.get("plot_type", "unknown"),
                            "model_name": model_job.filename,
                            "dataset_name": model_job.dataset_name,
                            "created_at": model_job.created_at,
                            "view_url": f"/plots/{plot_filename}",
                            "file_size": plot_path.stat().st_size if plot_path.exists() else 0
                        })
            
            return plots
            
        except Exception as e:
            logger.error(f"Failed to list plots for user {user_id}: {e}")
            return []
    
    async def delete_plot(self, filename: str) -> bool:
        """Delete a specific plot file."""
        try:
            plot_path = self.plots_dir / filename
            
            if not plot_path.exists():
                logger.warning(f"Plot file not found: {filename}")
                return False
            
            # Delete the file
            success = FileManager.delete_file(plot_path)
            
            if success:
                logger.info(f"Deleted plot: {filename}")
                
                # Update model job to remove this plot from plot_filenames
                await self._remove_plot_from_model_jobs(filename)
            
            return success
            
        except Exception as e:
            logger.error(f"Failed to delete plot {filename}: {e}")
            return False
    
    async def delete_user_plots(self, user_id: str) -> Dict[str, int]:
        """Delete all plots for a specific user."""
        try:
            # Find all plots for this user
            plots = await self.list_user_plots(user_id, limit=1000)
            
            deleted = 0
            failed = 0
            
            for plot in plots:
                if await self.delete_plot(plot["filename"]):
                    deleted += 1
                else:
                    failed += 1
            
            logger.info(f"Deleted {deleted} plots for user {user_id}, {failed} failed")
            
            return {"deleted": deleted, "failed": failed}
            
        except Exception as e:
            logger.error(f"Failed to delete plots for user {user_id}: {e}")
            return {"deleted": 0, "failed": 0}
    
    async def get_plot_info(self, filename: str) -> Optional[Dict[str, Any]]:
        """Get information about a plot file."""
        try:
            plot_path = self.plots_dir / filename
            
            if not plot_path.exists():
                return None
            
            # Get file info
            file_info = FileManager.get_file_info(plot_path)
            
            if not file_info:
                return None
            
            # Parse filename for additional info
            plot_info = NamingUtils.parse_plot_filename(filename)
            
            # Combine file info with parsed info
            return {
                **file_info,
                **plot_info,
                "view_url": f"/plots/{filename}"
            }
            
        except Exception as e:
            logger.error(f"Failed to get plot info for {filename}: {e}")
            return None
    
    async def find_plots_by_model(self, model_filename: str) -> List[str]:
        """Find all plots associated with a specific model."""
        try:
            # Query model jobs to find plots for this model
            model_job = await self.db.find(
                "model_jobs",
                {"filename": model_filename}
            )
            
            if not model_job:
                return []
            
            model_job_obj = ModelJob(**model_job)
            
            # Filter to only existing files
            existing_plots = []
            for plot_filename in model_job_obj.plot_filenames:
                plot_path = self.plots_dir / plot_filename
                if plot_path.exists():
                    existing_plots.append(plot_filename)
            
            return existing_plots
            
        except Exception as e:
            logger.error(f"Failed to find plots for model {model_filename}: {e}")
            return []
    
    async def cleanup_orphaned_plots(self) -> Dict[str, int]:
        """Remove plot files that are not referenced in any model job."""
        try:
            # Get all plot files from disk
            plot_files = set()
            for plot_path in self.plots_dir.glob("*.png"):
                plot_files.add(plot_path.name)
            
            # Get all referenced plot files from database
            referenced_plots = set()
            model_jobs = await self.db.find("model_jobs", {})
            
            for job in model_jobs:
                model_job = ModelJob(**job)
                referenced_plots.update(model_job.plot_filenames)
            
            # Find orphaned plots
            orphaned_plots = plot_files - referenced_plots
            
            deleted = 0
            failed = 0
            
            for plot_filename in orphaned_plots:
                plot_path = self.plots_dir / plot_filename
                if FileManager.delete_file(plot_path):
                    deleted += 1
                else:
                    failed += 1
            
            logger.info(f"Cleaned up {deleted} orphaned plots, {failed} failed")
            
            return {"deleted": deleted, "failed": failed}
            
        except Exception as e:
            logger.error(f"Failed to cleanup orphaned plots: {e}")
            return {"deleted": 0, "failed": 0}
    
    async def get_plots_by_type(self, user_id: str, plot_type: str) -> List[Dict[str, Any]]:
        """Get all plots of a specific type for a user."""
        try:
            all_plots = await self.list_user_plots(user_id, limit=1000)
            
            # Filter by plot type
            filtered_plots = [
                plot for plot in all_plots 
                if plot.get("plot_type", "").lower() == plot_type.lower()
            ]
            
            return filtered_plots
            
        except Exception as e:
            logger.error(f"Failed to get plots by type {plot_type} for user {user_id}: {e}")
            return []
    
    async def _remove_plot_from_model_jobs(self, plot_filename: str) -> None:
        """Remove plot filename from model jobs that reference it."""
        try:
            # Find model jobs that reference this plot
            model_jobs = await self.db.find(
                "model_jobs",
                {"plot_filenames": {"$in": [plot_filename]}}
            )
            
            for job in model_jobs:
                # Remove the plot filename from the list
                updated_plots = [
                    plot for plot in job["plot_filenames"] 
                    if plot != plot_filename
                ]
                
                # Update the document
                await self.db.update_document(
                    "model_jobs",
                    {"_id": job["_id"]},
                    {"$set": {"plot_filenames": updated_plots}}
                )
            
        except Exception as e:
            logger.error(f"Failed to remove plot {plot_filename} from model jobs: {e}")
    
    async def get_plot_statistics(self, user_id: Optional[str] = None) -> Dict[str, Any]:
        """Get statistics about plots."""
        try:
            query = {"user_id": user_id} if user_id else {}
            
            # Count plots by type
            plot_types = {}
            total_plots = 0
            total_size = 0
            
            if user_id:
                plots = await self.list_user_plots(user_id, limit=1000)
            else:
                # Get all plots from filesystem
                plots = []
                for plot_path in self.plots_dir.glob("*.png"):
                    plot_info = NamingUtils.parse_plot_filename(plot_path.name)
                    file_info = FileManager.get_file_info(plot_path)
                    
                    plots.append({
                        "filename": plot_path.name,
                        "plot_type": plot_info.get("plot_type", "unknown"),
                        "file_size": file_info["size"] if file_info else 0
                    })
            
            for plot in plots:
                plot_type = plot.get("plot_type", "unknown")
                plot_types[plot_type] = plot_types.get(plot_type, 0) + 1
                total_plots += 1
                total_size += plot.get("file_size", 0)
            
            return {
                "total_plots": total_plots,
                "total_size_bytes": total_size,
                "plot_types": plot_types,
                "user_id": user_id
            }
            
        except Exception as e:
            logger.error(f"Failed to get plot statistics: {e}")
            return {
                "total_plots": 0,
                "total_size_bytes": 0,
                "plot_types": {},
                "user_id": user_id
            }